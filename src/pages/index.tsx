import axios from "axios";
import Head from "next/head";
import { useState } from "react";
import { SubmitHandler, set, useForm } from "react-hook-form";

type Inputs = {
  to: string;
  subject: string;
  content: string;
  files: File[];
  aes?: boolean;
  signed?: boolean;
};

type FetchResponse = {
  body: { blob: string };
  headerInfo: {
    Date: string;
    From: string;
    Subject: string;
    To: string;
  };
  shortBody: " ";
};

type DecryptInputs = {
  publicKey: File;
  privateKey: File;
  blob: string;
};

export default function Home() {
  const [encryptState, setEncryptState] = useState<
    "none" | "encrypt" | "signed" | "both"
  >("none");
  const [fetchResponse, setFetchResponse] = useState<Array<FetchResponse>>([]);

  const { register: registerEmail, handleSubmit: handleSubmitForEmail } =
    useForm<Inputs>();

  const { register: registerDecrypt, handleSubmit: handleSubmitDecrypt } =
    useForm<DecryptInputs>();

  const handleDecryptSubmit: SubmitHandler<DecryptInputs> = async (data) => {
    const response = await axios.post(
      "http://localhost:8080/aes",
      {
        files: data.privateKey,
        blob: data.blob,
      },
      {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      }
    );

    console.log(response.data);
  };

  const handleEncryptState = (data: Inputs) => {
    switch (encryptState) {
      case "none":
        return {
          ...data,
          aes: false,
          signed: false,
        };
      case "encrypt":
        return {
          ...data,
          aes: true,
          signed: false,
        };
      case "signed":
        return {
          ...data,
          aes: false,
          signed: true,
        };
      case "both":
        return {
          ...data,
          aes: true,
          signed: true,
        };
    }
  };

  const onSubmit: SubmitHandler<Inputs> = async (data) => {
    data.content = `<html><body>${data.content}</body></html>`;

    data = handleEncryptState(data);
    console.log(data);

    await axios.post("http://localhost:8080/send", data, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
    });
  };

  const fetchData = async () => {
    const response = await axios.get<Array<FetchResponse>>(
      "http://localhost:8080/fetch"
    );
    setFetchResponse(response.data);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen flex-col items-center justify-center overflow-x-hidden">
        <div className="flex w-full flex-row items-center justify-between">
          <form
            method="POST"
            onSubmit={(e) => {
              e.preventDefault();
              handleSubmitForEmail(onSubmit)();
            }}
            className="flex flex-col items-start justify-center space-y-2 rounded-md border-2 p-4"
          >
            <input
              {...registerEmail("to")}
              className="w-80 rounded-md border-2 px-2 py-2"
              type="text"
              placeholder="Enter the email you want to send to"
            />
            <input
              {...registerEmail("subject")}
              className="w-80 rounded-md border-2 px-2 py-2"
              type="text"
              placeholder="subject"
            />
            <input
              {...registerEmail("files")}
              className="rounded-md border-2 px-2 py-1.5"
              type="file"
            />

            <div className="flex flex-row items-center justify-center space-x-4">
              <textarea
                {...registerEmail("content", { required: true })}
                className="h-48 w-80 resize-none rounded-md border-2 px-2 py-2 text-sm"
                rows={5}
              />
              <div className="flex flex-col items-center justify-center">
                <label>Encrypt</label>
                <select
                  value={encryptState}
                  onChange={(e) =>
                    setEncryptState(e.target.value as typeof encryptState)
                  }
                >
                  <option value="none">none</option>
                  <option value="encrypt">encrypt</option>
                  <option value="signed">signed</option>
                  <option value="both">both</option>
                </select>
              </div>
            </div>

            <button className="rounded-md bg-green-300 px-6 py-1">
              Submit
            </button>
          </form>
          <div className="rounded-md border-2 px-8 py-4">
            <form
              onSubmit={(e) => {
                e.preventDefault();
                handleSubmitDecrypt(handleDecryptSubmit)();
              }}
              className="flex flex-col space-y-2"
            >
              <button
                type="button"
                onClick={fetchData}
                className="rounded-md bg-blue-300 px-2 py-2"
              >
                Fetch Data
              </button>
              <div className="flex flex-col space-y-2">
                <div className="flex flex-row items-center justify-between space-x-2">
                  <label>public</label>
                  <input {...registerDecrypt("publicKey")} type="file" />
                </div>
                <div className="flex flex-row items-center justify-between space-x-2">
                  <label>private</label>
                  <input {...registerDecrypt("privateKey")} type="file" />
                </div>
              </div>
              <div className="flex flex-col items-center justify-center space-y-4">
                {fetchResponse.map((response, index) => (
                  <button
                    type="submit"
                    onSubmit={(e) => {
                      e.preventDefault();
                      console.log("clicked");
                    }}
                    key={index}
                    className="rounded-lg border-2 px-4 py-2"
                  >
                    <p>{response.headerInfo.Subject}</p>
                    <p>{response.headerInfo.To}</p>
                    <input
                      {...registerDecrypt("blob")}
                      className="hidden"
                      value={response.body.blob}
                    />
                  </button>
                ))}
              </div>
            </form>
          </div>
        </div>
      </main>
    </>
  );
}
